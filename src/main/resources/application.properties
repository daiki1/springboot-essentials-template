spring.application.name=spring-project

#; Spring Boot application properties, for the general configuration, select the application.properties file for development or production
spring.profiles.active=dev

#; Data base configuration
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=true
#spring.jpa.open-in-view is set = false to avoid lazy loading issues, is not needed for REST APIs, due to the fact that the data is already loaded in the controller
spring.jpa.open-in-view=false

#; JPA auto-generate tables disabled due to liquibase in use
spring.jpa.hibernate.ddl-auto=none

#; Liquibase configuration (tables will be created from entities, the changelog is used only to update registers when needed)
spring.liquibase.enabled=true

#; Your super secret pepper for hashing passwords
security.pepper= "yourSuperSecretPepper"

#; Authentication configuration jwtSecret must be at least 32 characters long to avoid security issues
#; Create your own secret key.
app.jwtSecret=vREb5'kKJsZwy@h7i~Vgmfn8v|?Y@gQs
# 15 minutes
app.jwtExpirationInMs=900000
# 7 days
app.jwtRefreshExpirationMs=604800000
#; Issuer and audience for JWT
app.jwtIssuer=my-spring-app
app.jwtAudience=my-app-client

# Allows the user to have a single sign-on session
app.oneSingleSignOn=true

# Set the logging level for the root logger
logging.level.root=INFO

# Set the location and name of the log file
logging.file.name=logs/application.log

# Specify the log directory if necessary
# Note: Ensure that the directory exists or is created by your application
logging.file.path=logs

#; Handler exception if no handler found
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false
server.error.whitelabel.enabled=false

#; import mail-secrets.properties to avoid exposing sensitive information in the repository
spring.config.import=classpath:mail-secrets.properties

#; Email configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${mail.username}
spring.mail.password=${mail.password}
spring.mail.from=${mail.from}
spring.mail.properties.mail.smtp.auth: true
spring.mail.properties.mail.smtp.starttls.enable: true

#If you get the error SSLHandshakeException: PKIX path building failed...unable to find valid certification path
#Get the certificate using the following command:
#openssl s_client -connect smtp.gmail.com:587 -starttls smtp
# Then, copy the certificate and save it in a file named smtp-gmail.cer from -----BEGIN CERTIFICATE----- to -----END CERTIFICATE-----
# Then, import the certificate into the Java keystore using the following command:
#keytool -importcert -alias gmail-smtp -file path/to/gmail-smtp.cer -keystore "%JAVA_HOME%\lib\security\cacerts" -storepass changeit


#; Mailtrap configuration to test email sending for Dev/Test environments
#spring.mail.host=sandbox.smtp.mailtrap.io
#spring.mail.port=2525
#spring.mail.from=${mail.from}
#spring.mail.username=${mail.username}
#spring.mail.password=${mail.password}
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.properties.mail.smtp.starttls.required=true
